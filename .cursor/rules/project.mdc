---
alwaysApply: true
---

# dinhanhthi.com - Cursor Rules

## Tech Stack

- **Framework**: Next.js 15+ (App Router)
- **Styling**: Tailwind CSS v4
- **CMS**: Notion (using custom Notion renderer integrated into the project)
- **Cache**: Upstash Redis (for Notion API response caching)
- **Email**: Resend (for error notifications)
- **Language**: TypeScript
- **Package Manager**: pnpm
- **Deployment**: Vercel

## Development Commands

```bash
# Development server (port 3004)
pnpm run dev

# Build
pnpm run build

# Production server (port 3004)
pnpm start

# Linting
pnpm run lint

# Format code
pnpm run prettier

# Clean build artifacts
pnpm run clean

# Full rebuild
pnpm run clean-build

# Reinstall dependencies
pnpm run reinstall

# Redis cache management (requires Redis setup)
pnpm run warm-cache        # Populate Redis cache with fresh data
pnpm run clear-cache --all # Clear all Redis cache
```

## Architecture Overview

### Notion Renderer Components

This project uses a **custom Notion renderer** integrated directly into the codebase (previously a git submodule, now fully migrated):

- **Location**:
  - Components: `src/components/notion/` - React components for rendering Notion blocks
  - Icons: `src/app/icons/` - Custom icon components
  - Utilities: `src/lib/notion/` - Notion-specific helper functions, hooks, context, and database utilities
  - Shared utilities: `src/lib/` - General utilities (config, fetcher, helpers, fonts, utils)
  - Styles: `src/components/notion/styles/` - SCSS styles for Notion rendering
- **Import pattern**:
  - Notion utilities: `@/src/lib/notion/*`
  - General utilities: `@/src/lib/*` (e.g., `@/src/lib/config`, `@/src/lib/utils`)
  - Components: `@/src/app/components/*` or `@/src/app/icons/*`
- **Architecture principle**: All utilities live in `src/lib/`, NOT in `src/app/lib/`

### Project Structure

```
src/
├── app/                      # Next.js App Router
│   ├── (single-page)/       # Route group for static pages (about, tools, reading, etc.)
│   ├── api/                 # API routes (og, search-notion)
│   ├── components/          # App-specific React components
│   ├── hooks/               # Custom React hooks
│   ├── icons/               # Icon components
│   ├── note/[slug]/        # Dynamic note pages
│   ├── tag/[[...slug]]/    # Tag pages with optional catch-all
│   └── templates/           # Page templates
├── components/              # Shared components
│   └── notion/             # Notion renderer components
│       ├── post-types/     # Post card component variants
│       └── styles/         # Notion rendering styles
├── lib/                     # All utilities and business logic
│   ├── notion/             # Notion-specific utilities
│   │   ├── context.tsx     # Notion context provider
│   │   ├── db.ts          # Notion database utilities (with Redis cache)
│   │   ├── helpers.ts     # Notion helper functions
│   │   ├── hooks.ts       # Notion custom hooks
│   │   ├── interface.ts   # TypeScript interfaces
│   │   ├── renderer.tsx   # Main renderer component
│   │   └── ...            # Other Notion utilities
│   ├── config.ts           # Site-wide constants and settings
│   ├── fetcher.ts          # Data fetching utilities (with Redis cache)
│   ├── redis-cache.ts      # Redis caching layer (Upstash)
│   ├── helpers.ts          # General helper functions
│   ├── fonts.ts            # Font configurations
│   └── utils.ts            # General utilities (cn, etc.)
├── data/                    # Static data files (menus, skills, topics, etc.)
└── fontello/                # Custom icon fonts
```

### Data Flow & Notion Integration

This site uses **Notion as a headless CMS**. Content is fetched from multiple Notion databases:

- **Posts DB**: Main content (notes/blog posts) with properties like tags, slug, published status, language
- **Tools DB**: Curated tools collection
- **Reading DB**: Books and reading list
- **Topics DB**: Topic taxonomy with icons and metadata

Environment variables (see `example.env.local`) define:

- Notion API credentials (`NOTION_TOKEN`)
- Database IDs and property keys (e.g., `NEXT_PUBLIC_ID_TAGS`, `NEXT_PUBLIC_ID_SLUG`)
- Feature flags (`ENV_MODE`, `NEXT_PUBLIC_ENV_MODE`)
- Redis credentials (`UPSTASH_REDIS_REST_URL`, `UPSTASH_REDIS_REST_TOKEN`) - Optional but recommended
- Resend credentials (`RESEND_API_KEY`, `ADMIN_EMAIL`) - Optional but recommended for error monitoring

### Redis Cache Layer

- **Location**: `src/lib/redis-cache.ts`
- **Strategy**: Stale-while-revalidate with fallback to cached data on errors
- **Provider**: Upstash Redis (optional but recommended)
- **Benefits**: Users always see content (even when Notion API fails), faster page loads, reduced API calls
- **Note**: Without Redis config, site works normally but without caching

### Error Notifications (Resend)

- **Location**: `src/lib/send-error-email.ts`
- **Provider**: Resend (optional but recommended)
- **Triggers**: Notion API failures, cache errors, network timeouts
- **Features**: Rate limiting (1 email/5min), detailed error context, graceful degradation
- **Note**: Without Resend config, errors are only logged to console

**Cached Functions**:
- All functions in `src/lib/fetcher.ts`: `getPosts()`, `getTopics()`, `getUnofficialPosts()`, etc.
- Block fetching in `src/lib/notion/db.ts`: `getBlocks()`

**Cache TTL Strategy** (Refresh-Ahead Pattern):
- Uses **two TTL values**: `softTTL` (refresh threshold) + `hardTTL` (deletion time)
- **softTTL**: When to refresh cache in background (user gets instant response)
- **hardTTL**: When Redis deletes cache (safety net, typically 30 days)
- Configuration defined in `src/lib/config.ts` → `redisCacheTTL` constant
- In normal operation, hardTTL is **never reached** (cache refreshes every softTTL)

### TypeScript Configuration

- Path alias: `@/*` (root - maps to project root)
- Strict mode enabled with unused variable checks
- Custom type declarations in `src/interface.d.ts` and `src/lib/notion/react-copy-to-clipboard.d.ts`

## Environment Variables

**Required**:
- `NOTION_TOKEN` - Notion API token
- Database IDs and property keys (see `example.env.local`)
- `ENV_MODE` - Set to `dev` for local development

**Optional** (but recommended):
- `UPSTASH_REDIS_REST_URL` + `UPSTASH_REDIS_REST_TOKEN` - Redis caching
- `RESEND_API_KEY` + `ADMIN_EMAIL` - Error notifications

Refer to `example.env.local` for complete list and documentation links.

## Code Style

- ESLint configured with Next.js, React, TypeScript, Tailwind, and Unicorn plugins
- Prettier with import sorting and Tailwind class ordering
- Max line length: 100 characters
- Warnings for unused imports and variables

## Deployment Notes

- Deployed on Vercel with pnpm (automatically detected via `packageManager` field)
- pnpm configuration in `.npmrc` handles peer dependencies and hoisting
- Build script warnings for native packages (sharp, @tailwindcss/oxide) are expected and non-breaking
- Static page generation timeout: 180 seconds
- Preview deployments have `X-Robots-Tag: noindex` header
- Sitemap auto-generated with `next-sitemap` in postbuild step
- **Redis Cache (Production)**: Add `UPSTASH_REDIS_REST_URL` + `UPSTASH_REDIS_REST_TOKEN` to Vercel Environment Variables (use separate database from dev)
- **Error Notifications (Production)**: Add `RESEND_API_KEY` + `ADMIN_EMAIL` to Vercel Environment Variables
- **Cache warming**: Run `pnpm run warm-cache` locally before deploy for optimal first-load performance

## Auto-Update Rules (For AI)

**IMPORTANT**: When you detect changes in the project that affect the documentation, you MUST proactively update this file (`.cursor/rules/project.mdc`) and `CLAUDE.md`.

### Triggers for Auto-Update

Update rules files when you detect:

1. **Architecture Changes**:
   - New directories in `src/` (e.g., new `src/lib/something/`)
   - Changes in import patterns or path aliases
   - Restructuring of components, utilities, or data flow
   - Migration from one pattern to another (e.g., submodule → integrated code)

2. **Tech Stack Changes**:
   - Framework upgrades (Next.js, React versions)
   - New major dependencies (Tailwind, Redis, CMS, etc.)
   - Package manager changes
   - Build tool modifications

3. **Development Workflow Changes**:
   - New npm/pnpm scripts in `package.json`
   - New environment variables in `example.env.local`
   - Changes in build/dev commands
   - New cache management strategies

4. **Feature Additions**:
   - New integrations (APIs, databases, services)
   - New data sources or databases
   - New caching layers or optimization strategies
   - New deployment configurations

5. **Code Style/Convention Changes**:
   - ESLint/Prettier config updates
   - New coding patterns or best practices
   - TypeScript configuration changes
   - Import/export conventions

### How to Update

When updating rules files:

1. **Identify the change**: Clearly note what has changed in the project
2. **Update both files**: Keep `CLAUDE.md` and `.cursor/rules/project.mdc` in sync
3. **Be specific**: Update exact sections (Tech Stack, Commands, Architecture, etc.)
4. **Preserve structure**: Maintain the existing format and organization
5. **Inform user**: Explicitly mention that you've updated the rules files and what changed

### Example Update Flow

```
1. Detect: New `src/lib/database/` directory added with PostgreSQL integration
2. Update:
   - Tech Stack section → Add "Database: PostgreSQL"
   - Architecture section → Document new database utilities
   - Environment Setup → Add PostgreSQL credentials
3. Inform: "I've updated CLAUDE.md and project.mdc to reflect the new PostgreSQL integration"
```

**Note**: This is a living document. Keep it accurate and up-to-date to ensure AI assistance remains effective.
