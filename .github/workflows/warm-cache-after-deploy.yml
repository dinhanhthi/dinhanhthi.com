name: Warm Cache After Vercel Deploy

on:
  # Trigger when a deployment status is created/updated
  deployment_status:

jobs:
  warm-cache:
    # Only run on successful production deployments
    if: |
      github.event.deployment_status.state == 'success' &&
      github.event.deployment_status.environment == 'Production'

    runs-on: ubuntu-latest

    steps:
      - name: Wait for deployment to be fully ready
        run: sleep 10

      - name: Warm Redis Cache
        run: |
          echo "üî• Triggering cache warming for production deployment..."

          # Use -L to follow redirects, ensure HTTPS
          response=$(curl -L -s -w "\n%{http_code}" -X POST \
            "${{ secrets.SITE_URL }}/api/cron/warm-cache" \
            -H "Authorization: Bearer ${{ secrets.DEPLOY_HOOK_SECRET }}" \
            -H "Content-Type: application/json")

          http_code=$(echo "$response" | tail -n1)
          body=$(echo "$response" | sed '$d')

          echo "Response: $body"
          echo "HTTP Status: $http_code"

          if [ $http_code -eq 200 ]; then
            echo "‚úÖ Cache warming completed successfully"
          elif [ $http_code -eq 401 ]; then
            echo "‚ùå Unauthorized - Check DEPLOY_HOOK_SECRET"
            exit 1
          elif [ $http_code -eq 500 ]; then
            echo "‚ùå Server error - Check DEPLOY_HOOK_SECRET configuration on Vercel"
            exit 1
          else
            echo "‚ö†Ô∏è Cache warming failed with status $http_code"
            echo "This is not critical, deployment is still successful"
          fi

      - name: Report Status
        if: always()
        run: |
          echo "Deployment URL: ${{ github.event.deployment_status.target_url }}"
          echo "Environment: ${{ github.event.deployment_status.environment }}"
          echo "State: ${{ github.event.deployment_status.state }}"
