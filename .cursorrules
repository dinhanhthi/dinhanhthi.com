# Cursor Rules for dinhanhthi.com

## Redis Cache Implementation

### Overview
This project uses **Upstash Redis** as a cache layer for Notion API responses with a **stale-while-revalidate** strategy.

**Core Principle**: Users always see content (fresh or stale), errors are logged but never shown to users.

### Architecture

```
┌─────────────────────────────────────────────────────────────┐
│ User Request                                                │
└────────────────────┬────────────────────────────────────────┘
                     │
                     ▼
        ┌──────────────────────────────┐
        │  Try Notion API              │
        └──────────┬───────────────────┘
                   │
         ┌─────────┴─────────┐
         │                   │
    ✅ Success          ❌ Error
         │                   │
         ▼                   ▼
  ┌────────────┐    ┌─────────────────┐
  │ Cache +    │    │ Fetch from      │
  │ Return     │    │ Redis (stale OK)│
  └────────────┘    └────────┬────────┘
                              │
                     ┌────────┴────────┐
                     │                 │
                 Found           Not Found
                     │                 │
                     ▼                 ▼
            ┌────────────┐    ┌────────────┐
            │ Return +   │    │ Throw      │
            │ Log warn   │    │ error      │
            └────────────┘    └────────────┘
```

### Key Files & Responsibilities

#### Core Cache Logic
- **`src/lib/redis-cache.ts`**
  - `withRedisCache()` - Main wrapper function (Refresh-Ahead Pattern)
  - `invalidateCache()` - Clear specific cache key
  - `clearNamespace()` - Clear all cache in namespace
  - `getCacheInfo()` - Get cache metadata
  - Uses Upstash Redis REST API
  - Graceful degradation if Redis not configured
  - **Two TTL Strategy**: softTTL (refresh threshold) + hardTTL (deletion time)

#### Cache Integration Points
- **`src/lib/fetcher.ts`** - All data fetching functions wrapped:
  - `getUnofficialPosts()` → Soft: 1h / Hard: 14d
  - `getPosts()` → Soft: 30m / Hard: 7d
  - `getCustomEmojiUrl()` → Soft: 24h / Hard: 14d
  - `getUnofficialBooks()` → Soft: 4h / Hard: 14d
  - `getUnofficialTools()` → Soft: 4h / Hard: 14d
  - `getTopics()` → Soft: 2h / Hard: 14d

- **`src/lib/notion/db.ts`**
  - `getBlocks()` → Soft: 1h / Hard: 14d (cached per block ID)

#### Cache Management Scripts
- **`scripts/warm-cache.ts`** - Populate cache after deployment
- **`scripts/clear-cache.ts`** - Clear cache (all or specific keys)

### Cache Configuration

**Environment Variables** (optional):
```bash
UPSTASH_REDIS_REST_URL="https://your-redis-url.upstash.io"
UPSTASH_REDIS_REST_TOKEN="your-token"
```

**Without Redis**: Site works normally, no caching, direct API calls.

**Cache Keys Pattern**:
- `notion:topics` - All topics/tags
- `notion:unofficial-posts` - All unofficial posts
- `notion:unofficial-books` - Books list
- `notion:unofficial-tools` - Tools list
- `notion:posts-{hash}` - Posts with filters (hash = JSON stringified options)
- `notion:blocks-{blockId}` - Blocks for specific page
- `notion:emoji-{pageId}-{emojiId}` - Custom emoji URLs

**TTL Strategy** (Refresh-Ahead Pattern):
- Posts: Soft 30m / Hard 7d - Updated frequently
- Unofficial Posts: Soft 1h / Hard 14d - Large dataset, less frequent updates
- Books: Soft 4h / Hard 14d - Reading list stable
- Tools: Soft 4h / Hard 14d - Tool collection stable
- Topics: Soft 2h / Hard 14d - Taxonomy rarely changes
- Blocks: Soft 1h / Hard 14d - Page content moderately updated
- Emojis: Soft 24h / Hard 14d - Almost never change

**Two TTL Concept**:
- **Soft TTL**: Refresh threshold - cache served immediately, refreshed in background
- **Hard TTL**: Deletion time - Redis removes key after this (14 days = safety net)

### Development Guidelines

#### When Adding New Cached Functions

1. **Wrap with `withRedisCache()`**:
```typescript
import { withRedisCache } from '@/src/lib/redis-cache'

export async function getNewData() {
  return withRedisCache(
    'unique-cache-key',  // Should be descriptive
    async () => {
      // Your fetch logic here
      return await fetchFromNotion()
    },
    {
      namespace: 'notion',  // Use 'notion' for all Notion-related data
      softTTL: 3600,       // When to refresh (e.g., 1 hour)
      hardTTL: 1209600,    // When to delete (14 days = safety net)
      debug: false         // Set true for debugging
    }
  )
}
```

2. **Cache Key Naming Convention**:
   - Use descriptive, lowercase names
   - Separate words with hyphens
   - Include identifiers for dynamic keys
   - Examples: `topics`, `posts-{hash}`, `blocks-{blockId}`

3. **Choose Appropriate TTL**:
   - **Soft TTL** (refresh threshold):
     - High frequency updates: 15-30 minutes
     - Moderate updates: 1-4 hours
     - Rare updates: 2-24 hours
   - **Hard TTL** (deletion time):
     - Frequently changing: 7 days
     - Stable content: 14 days
     - Static data: 14 days (standard)

#### Error Handling Rules

**DO**:
- ✅ Log errors with descriptive context
- ✅ Return stale cache when available
- ✅ Use emoji indicators (🚨 errors, ⚠️ warnings, ✅ success)
- ✅ Include cache age in warnings

**DON'T**:
- ❌ Show error messages to users
- ❌ Throw errors when cache is available
- ❌ Skip logging (developers need visibility)
- ❌ Cache error responses

#### Cache Management Commands

```bash
# Development
pnpm run dev                    # Start with cache enabled
pnpm run warm-cache             # Populate cache
pnpm run clear-cache --all      # Clear all cache
pnpm run clear-cache --key=X    # Clear specific key

# Production
# Add UPSTASH_* env vars to Vercel
# Run warm-cache after deployment (optional)
```

#### Testing Cache Implementation

1. **Normal operation**: Visit pages, check logs for `✅ Cached data: notion:*`
2. **Stale cache**: Break Notion token, should see `⚠️ Using stale cache`
3. **Cache miss**: Clear cache, break token, should see error
4. **Verify in Upstash Console**: Data Browser → see `notion:*` keys

### Monitoring & Debugging

**Development Logs** (console):
```
✅ Cached data: notion:topics (TTL: 7200s)
⚠️ Using stale cache for topics (age: 45m)
🚨 Fetch error for topics: Error: API rate limit exceeded
🗑️ Invalidated cache: notion:topics
```

**Production Monitoring**:
- Vercel Function Logs → filter by emoji indicators
- Upstash Console → Metrics → hit/miss ratio
- Upstash Console → Data Browser → inspect cache keys

**Debug Mode**:
```typescript
withRedisCache(key, fetcher, { debug: true })
```

### Important Notes

1. **p-memoize Compatibility**: Redis cache works alongside existing p-memoize (in-memory cache). They complement each other.

2. **Graceful Degradation**: If Redis not configured:
   ```
   ⚠️ Redis not configured - caching disabled
   ```
   Site continues to work normally without caching.

3. **Backward Compatible**: Removing Redis env vars = site works as before Redis implementation.

4. **Free Tier**: Upstash free tier (10K commands/day) is sufficient for most personal sites.

5. **Production Setup**: Use separate Redis database for production (or same with namespace separation).

### Documentation

- **Quick Start** (Vietnamese, 5 min): `REDIS_QUICK_START.md`
- **Detailed Setup** (English, comprehensive): `REDIS_SETUP.md`
- **Technical Summary**: `REDIS_SUMMARY.md`
- **Migration Checklist**: `.github/REDIS_MIGRATION_CHECKLIST.md`

### Example Usage in Code

**Fetcher function with cache**:
```typescript
// src/lib/fetcher.ts
import { withRedisCache } from '@/src/lib/redis-cache'

export const getTopics = async () => {
  return withRedisCache(
    'topics',
    async () => {
      const data = await notion.databases.query({
        database_id: idDbTopics
      })
      return parseTopicsProperties(data.results)
    },
    {
      namespace: 'notion',
      ttl: 7200 // 2 hours
    }
  )
}
```

**Cache invalidation**:
```typescript
import { invalidateCache } from '@/src/lib/redis-cache'

// After updating content in Notion
await invalidateCache('topics', { namespace: 'notion' })
```

**Clear all cache**:
```typescript
import { clearNamespace } from '@/src/lib/redis-cache'

const count = await clearNamespace('notion')
console.log(`Cleared ${count} cache entries`)
```

---

## General Project Rules

- **Architecture**: All utilities in `src/lib/`, NOT `src/app/lib/`
- **Imports**: Use `@/src/lib/*` for utilities, `@/src/app/components/*` for components
- **Git Operations**: NEVER use git commands - user handles all git operations
- **Language**: Answer in Vietnamese, code/terminology in English
- **Package Manager**: Always use `pnpm`, never `npm` or `yarn`

